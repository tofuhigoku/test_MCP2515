
thesis_ppv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002308  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002414  08002414  00012414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002438  08002438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002438  08002438  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002438  08002438  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  0800244c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800244c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005ef4  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001697  00000000  00000000  00025f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  00027608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050c  00000000  00000000  00027ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001648d  00000000  00000000  000281ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007258  00000000  00000000  0003e679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e8a3  00000000  00000000  000458d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a0c  00000000  00000000  000c4174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c5b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023fc 	.word	0x080023fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080023fc 	.word	0x080023fc

0800014c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
e_CANSPI_RETURN_t CANSPI_Initialize(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000152:	2300      	movs	r3, #0
 8000154:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800015a:	2300      	movs	r3, #0
 800015c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800015e:	2300      	movs	r3, #0
 8000160:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 8000162:	2300      	movs	r3, #0
 8000164:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800016e:	2300      	movs	r3, #0
 8000170:	70fb      	strb	r3, [r7, #3]

  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;
 8000172:	2300      	movs	r3, #0
 8000174:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Use Starndard Filter
 8000176:	2300      	movs	r3, #0
 8000178:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800017a:	2300      	movs	r3, #0
 800017c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800017e:	2300      	movs	r3, #0
 8000180:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Use Exntended Filter
 8000186:	2308      	movs	r3, #8
 8000188:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800018a:	2300      	movs	r3, #0
 800018c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000196:	2300      	movs	r3, #0
 8000198:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800019a:	2300      	movs	r3, #0
 800019c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 80001a2:	2300      	movs	r3, #0
 80001a4:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80001a6:	2300      	movs	r3, #0
 80001a8:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80001aa:	2300      	movs	r3, #0
 80001ac:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80001ae:	2300      	movs	r3, #0
 80001b0:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80001b6:	2300      	movs	r3, #0
 80001b8:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;		//Use Exntended Filter
 80001c6:	2308      	movs	r3, #8
 80001c8:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]
//  {
//    return false;
//  }

  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80001d2:	f000 f92d 	bl	8000430 <MCP2515_SetConfigMode>
 80001d6:	4603      	mov	r3, r0
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <CANSPI_Initialize+0x9a>
  {
    return e_CANSPI_SETCONFIGMODE_RETURN_FALSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e054      	b.n	8000290 <CANSPI_Initialize+0x144>
  }

  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	461a      	mov	r2, r3
 80001ea:	2123      	movs	r1, #35	; 0x23
 80001ec:	2020      	movs	r0, #32
 80001ee:	f000 f9c3 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 80001f2:	463b      	mov	r3, r7
 80001f4:	461a      	mov	r2, r3
 80001f6:	2127      	movs	r1, #39	; 0x27
 80001f8:	2024      	movs	r0, #36	; 0x24
 80001fa:	f000 f9bd 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80001fe:	f107 031c 	add.w	r3, r7, #28
 8000202:	461a      	mov	r2, r3
 8000204:	2103      	movs	r1, #3
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f9b6 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800020c:	f107 0318 	add.w	r3, r7, #24
 8000210:	461a      	mov	r2, r3
 8000212:	2107      	movs	r1, #7
 8000214:	2004      	movs	r0, #4
 8000216:	f000 f9af 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	461a      	mov	r2, r3
 8000220:	210b      	movs	r1, #11
 8000222:	2008      	movs	r0, #8
 8000224:	f000 f9a8 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000228:	f107 0310 	add.w	r3, r7, #16
 800022c:	461a      	mov	r2, r3
 800022e:	2113      	movs	r1, #19
 8000230:	2010      	movs	r0, #16
 8000232:	f000 f9a1 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000236:	f107 030c 	add.w	r3, r7, #12
 800023a:	461a      	mov	r2, r3
 800023c:	2117      	movs	r1, #23
 800023e:	2014      	movs	r0, #20
 8000240:	f000 f99a 	bl	8000578 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000244:	f107 0308 	add.w	r3, r7, #8
 8000248:	461a      	mov	r2, r3
 800024a:	211b      	movs	r1, #27
 800024c:	2018      	movs	r0, #24
 800024e:	f000 f993 	bl	8000578 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000252:	2104      	movs	r1, #4
 8000254:	2060      	movs	r0, #96	; 0x60
 8000256:	f000 f96b 	bl	8000530 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800025a:	2101      	movs	r1, #1
 800025c:	2070      	movs	r0, #112	; 0x70
 800025e:	f000 f967 	bl	8000530 <MCP2515_WriteByte>
  */


  /* Setting for 8MHz 500kBPS */
  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000262:	2100      	movs	r1, #0
 8000264:	202a      	movs	r0, #42	; 0x2a
 8000266:	f000 f963 	bl	8000530 <MCP2515_WriteByte>

//  /* 1 1 100(5tq) 101(6tq) */
//  MCP2515_WriteByte(MCP2515_CNF2, 0xB1);
// =>
  /* 1 0 010(2+1tq) 001(1+1tq) */	// => PS1 = 3tq = 3*0.250us = 0.75us, PROP_SEG = 2tq = 2*0.250us = 0.5us
  MCP2515_WriteByte(MCP2515_CNF2, 0x91);
 800026a:	2191      	movs	r1, #145	; 0x91
 800026c:	2029      	movs	r0, #41	; 0x29
 800026e:	f000 f95f 	bl	8000530 <MCP2515_WriteByte>

//  /* 1 0 000 011(4tq) */
//  MCP2515_WriteByte(MCP2515_CNF3, 0x85);
// =>
    /* 1 0 000 001(1+1tq) */		// => PS2 = 2tq = 2*0.250us = 0.5us
    MCP2515_WriteByte(MCP2515_CNF3, 0x81);
 8000272:	2181      	movs	r1, #129	; 0x81
 8000274:	2028      	movs	r0, #40	; 0x28
 8000276:	f000 f95b 	bl	8000530 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800027a:	f000 f8f7 	bl	800046c <MCP2515_SetNormalMode>
 800027e:	4603      	mov	r3, r0
 8000280:	f083 0301 	eor.w	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <CANSPI_Initialize+0x142>
    return e_CANSPI_SETNORMALMODE_RETURN_FALSE;
 800028a:	2302      	movs	r3, #2
 800028c:	e000      	b.n	8000290 <CANSPI_Initialize+0x144>

  return e_CANSPI_RETURN_OK;
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	3720      	adds	r7, #32
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <CANSPI_Receive>:
  return (returnValue);
}

/* Receive CAN message */
e_CANSPI_RETURN_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b088      	sub	sp, #32
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	e_CANSPI_RETURN_t returnValue = e_CANSPI_RETURN_FALSE;
 80002a0:	23ff      	movs	r3, #255	; 0xff
 80002a2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80002a4:	f000 f992 	bl	80005cc <MCP2515_GetRxStatus>
 80002a8:	4603      	mov	r3, r0
 80002aa:	733b      	strb	r3, [r7, #12]

  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80002ac:	7b3b      	ldrb	r3, [r7, #12]
 80002ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d05c      	beq.n	8000372 <CANSPI_Receive+0xda>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS)||(rxStatus.rxBuffer == MSG_IN_RXB0))
 80002b8:	7b3b      	ldrb	r3, [r7, #12]
 80002ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2bc0      	cmp	r3, #192	; 0xc0
 80002c2:	d005      	beq.n	80002d0 <CANSPI_Receive+0x38>
 80002c4:	7b3b      	ldrb	r3, [r7, #12]
 80002c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b40      	cmp	r3, #64	; 0x40
 80002ce:	d107      	bne.n	80002e0 <CANSPI_Receive+0x48>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80002d0:	f107 0310 	add.w	r3, r7, #16
 80002d4:	220d      	movs	r2, #13
 80002d6:	4619      	mov	r1, r3
 80002d8:	2090      	movs	r0, #144	; 0x90
 80002da:	f000 f907 	bl	80004ec <MCP2515_ReadRxSequence>
 80002de:	e00c      	b.n	80002fa <CANSPI_Receive+0x62>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80002e0:	7b3b      	ldrb	r3, [r7, #12]
 80002e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b80      	cmp	r3, #128	; 0x80
 80002ea:	d106      	bne.n	80002fa <CANSPI_Receive+0x62>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80002ec:	f107 0310 	add.w	r3, r7, #16
 80002f0:	220d      	movs	r2, #13
 80002f2:	4619      	mov	r1, r3
 80002f4:	2094      	movs	r0, #148	; 0x94
 80002f6:	f000 f8f9 	bl	80004ec <MCP2515_ReadRxSequence>
    }

    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80002fa:	7b3b      	ldrb	r3, [r7, #12]
 80002fc:	f003 0318 	and.w	r3, r3, #24
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10c      	bne.n	8000320 <CANSPI_Receive+0x88>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2202      	movs	r2, #2
 800030a:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800030c:	7cb8      	ldrb	r0, [r7, #18]
 800030e:	7cf9      	ldrb	r1, [r7, #19]
 8000310:	7c3a      	ldrb	r2, [r7, #16]
 8000312:	7c7b      	ldrb	r3, [r7, #17]
 8000314:	f000 f832 	bl	800037c <convertReg2ExtendedCANid>
 8000318:	4602      	mov	r2, r0
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	e00b      	b.n	8000338 <CANSPI_Receive+0xa0>
    }
    else
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000326:	7c3b      	ldrb	r3, [r7, #16]
 8000328:	7c7a      	ldrb	r2, [r7, #17]
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f863 	bl	80003f8 <convertReg2StandardCANid>
 8000332:	4602      	mov	r2, r0
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000338:	7d3a      	ldrb	r2, [r7, #20]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 800033e:	7d7a      	ldrb	r2, [r7, #21]
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8000344:	7dba      	ldrb	r2, [r7, #22]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800034a:	7dfa      	ldrb	r2, [r7, #23]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000350:	7e3a      	ldrb	r2, [r7, #24]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8000356:	7e7a      	ldrb	r2, [r7, #25]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800035c:	7eba      	ldrb	r2, [r7, #26]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8000362:	7efa      	ldrb	r2, [r7, #27]
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000368:	7f3a      	ldrb	r2, [r7, #28]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	741a      	strb	r2, [r3, #16]

    returnValue = e_CANSPI_RETURN_OK;
 800036e:	2300      	movs	r3, #0
 8000370:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8000372:	7ffb      	ldrb	r3, [r7, #31]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3720      	adds	r7, #32
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}

0800037c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800037c:	b490      	push	{r4, r7}
 800037e:	b086      	sub	sp, #24
 8000380:	af00      	add	r7, sp, #0
 8000382:	4604      	mov	r4, r0
 8000384:	4608      	mov	r0, r1
 8000386:	4611      	mov	r1, r2
 8000388:	461a      	mov	r2, r3
 800038a:	4623      	mov	r3, r4
 800038c:	71fb      	strb	r3, [r7, #7]
 800038e:	4603      	mov	r3, r0
 8000390:	71bb      	strb	r3, [r7, #6]
 8000392:	460b      	mov	r3, r1
 8000394:	717b      	strb	r3, [r7, #5]
 8000396:	4613      	mov	r3, r2
 8000398:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80003a2:	793b      	ldrb	r3, [r7, #4]
 80003a4:	f003 0303 	and.w	r3, r3, #3
 80003a8:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80003aa:	793b      	ldrb	r3, [r7, #4]
 80003ac:	095b      	lsrs	r3, r3, #5
 80003ae:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80003b0:	797b      	ldrb	r3, [r7, #5]
 80003b2:	00db      	lsls	r3, r3, #3
 80003b4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	693a      	ldr	r2, [r7, #16]
 80003ba:	4413      	add	r3, r2
 80003bc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	4413      	add	r3, r2
 80003ca:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	021b      	lsls	r3, r3, #8
 80003d0:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	693a      	ldr	r2, [r7, #16]
 80003d6:	4413      	add	r3, r2
 80003d8:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80003da:	693b      	ldr	r3, [r7, #16]
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80003e0:	79bb      	ldrb	r3, [r7, #6]
 80003e2:	693a      	ldr	r2, [r7, #16]
 80003e4:	4413      	add	r3, r2
 80003e6:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80003ec:	697b      	ldr	r3, [r7, #20]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc90      	pop	{r4, r7}
 80003f6:	4770      	bx	lr

080003f8 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	460a      	mov	r2, r1
 8000402:	71fb      	strb	r3, [r7, #7]
 8000404:	4613      	mov	r3, r2
 8000406:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	00db      	lsls	r3, r3, #3
 8000410:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	095b      	lsrs	r3, r3, #5
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	4413      	add	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000424:	68fb      	ldr	r3, [r7, #12]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <MCP2515_SetConfigMode>:
  return false;
}

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000436:	2180      	movs	r1, #128	; 0x80
 8000438:	200f      	movs	r0, #15
 800043a:	f000 f879 	bl	8000530 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800043e:	230a      	movs	r3, #10
 8000440:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000442:	200e      	movs	r0, #14
 8000444:	f000 f830 	bl	80004a8 <MCP2515_ReadByte>
 8000448:	4603      	mov	r3, r0
 800044a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800044e:	2b80      	cmp	r3, #128	; 0x80
 8000450:	d101      	bne.n	8000456 <MCP2515_SetConfigMode+0x26>
      return true;
 8000452:	2301      	movs	r3, #1
 8000454:	e006      	b.n	8000464 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	3b01      	subs	r3, #1
 800045a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d1ef      	bne.n	8000442 <MCP2515_SetConfigMode+0x12>

  return false;
 8000462:	2300      	movs	r3, #0
}
 8000464:	4618      	mov	r0, r3
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000472:	2100      	movs	r1, #0
 8000474:	200f      	movs	r0, #15
 8000476:	f000 f85b 	bl	8000530 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800047a:	230a      	movs	r3, #10
 800047c:	71fb      	strb	r3, [r7, #7]

  do {
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800047e:	200e      	movs	r0, #14
 8000480:	f000 f812 	bl	80004a8 <MCP2515_ReadByte>
 8000484:	4603      	mov	r3, r0
 8000486:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d101      	bne.n	8000492 <MCP2515_SetNormalMode+0x26>
      return true;
 800048e:	2301      	movs	r3, #1
 8000490:	e006      	b.n	80004a0 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	3b01      	subs	r3, #1
 8000496:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1ef      	bne.n	800047e <MCP2515_SetNormalMode+0x12>

  return false;
 800049e:	2300      	movs	r3, #0
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	3708      	adds	r7, #8
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80004b2:	2200      	movs	r2, #0
 80004b4:	2110      	movs	r1, #16
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MCP2515_ReadByte+0x40>)
 80004b8:	f000 fdce 	bl	8001058 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80004bc:	2003      	movs	r0, #3
 80004be:	f000 f8a1 	bl	8000604 <SPI_Tx>
  SPI_Tx(address);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	4618      	mov	r0, r3
 80004c6:	f000 f89d 	bl	8000604 <SPI_Tx>
  retVal = SPI_Rx();
 80004ca:	f000 f8c1 	bl	8000650 <SPI_Rx>
 80004ce:	4603      	mov	r3, r0
 80004d0:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80004d2:	2201      	movs	r2, #1
 80004d4:	2110      	movs	r1, #16
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <MCP2515_ReadByte+0x40>)
 80004d8:	f000 fdbe 	bl	8001058 <HAL_GPIO_WritePin>

  return retVal;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3710      	adds	r7, #16
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40010800 	.word	0x40010800

080004ec <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	6039      	str	r1, [r7, #0]
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	4613      	mov	r3, r2
 80004fa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80004fc:	2200      	movs	r2, #0
 80004fe:	2110      	movs	r1, #16
 8000500:	480a      	ldr	r0, [pc, #40]	; (800052c <MCP2515_ReadRxSequence+0x40>)
 8000502:	f000 fda9 	bl	8001058 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f87b 	bl	8000604 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	4619      	mov	r1, r3
 8000512:	6838      	ldr	r0, [r7, #0]
 8000514:	f000 f8ac 	bl	8000670 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <MCP2515_ReadRxSequence+0x40>)
 800051e:	f000 fd9b 	bl	8001058 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40010800 	.word	0x40010800

08000530 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	460a      	mov	r2, r1
 800053a:	71fb      	strb	r3, [r7, #7]
 800053c:	4613      	mov	r3, r2
 800053e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000540:	2200      	movs	r2, #0
 8000542:	2110      	movs	r1, #16
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <MCP2515_WriteByte+0x44>)
 8000546:	f000 fd87 	bl	8001058 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800054a:	2002      	movs	r0, #2
 800054c:	f000 f85a 	bl	8000604 <SPI_Tx>
  SPI_Tx(address);
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f856 	bl	8000604 <SPI_Tx>
  SPI_Tx(data);
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f852 	bl	8000604 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <MCP2515_WriteByte+0x44>)
 8000566:	f000 fd77 	bl	8001058 <HAL_GPIO_WritePin>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010800 	.word	0x40010800

08000578 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	603a      	str	r2, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	460b      	mov	r3, r1
 8000586:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <MCP2515_WriteByteSequence+0x50>)
 800058e:	f000 fd63 	bl	8001058 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000592:	2002      	movs	r0, #2
 8000594:	f000 f836 	bl	8000604 <SPI_Tx>
  SPI_Tx(startAddress);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f832 	bl	8000604 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	1ad3      	subs	r3, r2, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	3301      	adds	r3, #1
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	4619      	mov	r1, r3
 80005ae:	6838      	ldr	r0, [r7, #0]
 80005b0:	f000 f83a 	bl	8000628 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80005b4:	2201      	movs	r2, #1
 80005b6:	2110      	movs	r1, #16
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <MCP2515_WriteByteSequence+0x50>)
 80005ba:	f000 fd4d 	bl	8001058 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40010800 	.word	0x40010800

080005cc <MCP2515_GetRxStatus>:
  return retVal;
}

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80005d2:	2200      	movs	r2, #0
 80005d4:	2110      	movs	r1, #16
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <MCP2515_GetRxStatus+0x34>)
 80005d8:	f000 fd3e 	bl	8001058 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80005dc:	20b0      	movs	r0, #176	; 0xb0
 80005de:	f000 f811 	bl	8000604 <SPI_Tx>
  retVal = SPI_Rx();
 80005e2:	f000 f835 	bl	8000650 <SPI_Rx>
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <MCP2515_GetRxStatus+0x34>)
 80005f0:	f000 fd32 	bl	8001058 <HAL_GPIO_WritePin>

  return retVal;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010800 	.word	0x40010800

08000604 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	230a      	movs	r3, #10
 8000612:	2201      	movs	r2, #1
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <SPI_Tx+0x20>)
 8000616:	f001 f9b3 	bl	8001980 <HAL_SPI_Transmit>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000003c 	.word	0x2000003c

08000628 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000634:	78fb      	ldrb	r3, [r7, #3]
 8000636:	b29a      	uxth	r2, r3
 8000638:	230a      	movs	r3, #10
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <SPI_TxBuffer+0x24>)
 800063e:	f001 f99f 	bl	8001980 <HAL_SPI_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2000003c 	.word	0x2000003c

08000650 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000656:	1df9      	adds	r1, r7, #7
 8000658:	230a      	movs	r3, #10
 800065a:	2201      	movs	r2, #1
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <SPI_Rx+0x1c>)
 800065e:	f001 fad3 	bl	8001c08 <HAL_SPI_Receive>
  return retVal;
 8000662:	79fb      	ldrb	r3, [r7, #7]
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000003c 	.word	0x2000003c

08000670 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800067c:	78fb      	ldrb	r3, [r7, #3]
 800067e:	b29a      	uxth	r2, r3
 8000680:	230a      	movs	r3, #10
 8000682:	6879      	ldr	r1, [r7, #4]
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <SPI_RxBuffer+0x24>)
 8000686:	f001 fabf 	bl	8001c08 <HAL_SPI_Receive>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000003c 	.word	0x2000003c

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 f9ed 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f831 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f8ab 	bl	8000800 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006aa:	f000 f873 	bl	8000794 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 80006ae:	f7ff fd4d 	bl	800014c <CANSPI_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CANSPI_Receive(&rxMessage))
 80006b2:	4812      	ldr	r0, [pc, #72]	; (80006fc <main+0x64>)
 80006b4:	f7ff fdf0 	bl	8000298 <CANSPI_Receive>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d01a      	beq.n	80006f4 <main+0x5c>
	  	{
	  		if (rxMessage.frame.id == 0x123)
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <main+0x64>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f240 1223 	movw	r2, #291	; 0x123
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10f      	bne.n	80006ea <main+0x52>
	  		{
	  			int cnt = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	607b      	str	r3, [r7, #4]
	  			while (cnt--)
 80006ce:	e007      	b.n	80006e0 <main+0x48>
	  			{
	  				HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <main+0x68>)
 80006d6:	f000 fcd7 	bl	8001088 <HAL_GPIO_TogglePin>
	  				HAL_Delay(50);
 80006da:	2032      	movs	r0, #50	; 0x32
 80006dc:	f000 fa30 	bl	8000b40 <HAL_Delay>
	  			while (cnt--)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	607a      	str	r2, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f2      	bne.n	80006d0 <main+0x38>
	  			}
	  		}
	  		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <main+0x6c>)
 80006f0:	f000 fcca 	bl	8001088 <HAL_GPIO_TogglePin>
//	  	txMessage.frame.data5 = 5;
//	  	txMessage.frame.data6 = 6;
//	  	txMessage.frame.data7 = 7;
//	  	CANSPI_Transmit(&txMessage);

	  	HAL_Delay(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 fa23 	bl	8000b40 <HAL_Delay>
	  if(CANSPI_Receive(&rxMessage))
 80006fa:	e7da      	b.n	80006b2 <main+0x1a>
 80006fc:	20000028 	.word	0x20000028
 8000700:	40010800 	.word	0x40010800
 8000704:	40011000 	.word	0x40011000

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fe43 	bl	80023a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000738:	2301      	movs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000746:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 0318 	add.w	r3, r7, #24
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fcb3 	bl	80010bc <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800075c:	f000 f8b8 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000764:	2302      	movs	r3, #2
 8000766:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 ff20 	bl	80015c0 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000786:	f000 f8a3 	bl	80008d0 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3740      	adds	r7, #64	; 0x40
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI1_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c8:	2210      	movs	r2, #16
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e6:	f001 f847 	bl	8001878 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f86e 	bl	80008d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	2000003c 	.word	0x2000003c
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0310 	add.w	r3, r7, #16
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a2a      	ldr	r2, [pc, #168]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0310 	and.w	r3, r3, #16
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000832:	f043 0320 	orr.w	r3, r3, #32
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f003 0320 	and.w	r3, r3, #32
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <MX_GPIO_Init+0xc4>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xc4>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000862:	4819      	ldr	r0, [pc, #100]	; (80008c8 <MX_GPIO_Init+0xc8>)
 8000864:	f000 fbf8 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	4817      	ldr	r0, [pc, #92]	; (80008cc <MX_GPIO_Init+0xcc>)
 800086e:	f000 fbf3 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0xcc>)
 800087a:	f000 fbed 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	2301      	movs	r3, #1
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f107 0310 	add.w	r3, r7, #16
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_GPIO_Init+0xc8>)
 8000898:	f000 fa5a 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_CS_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin|LED1_Pin|LED2_Pin;
 800089c:	f44f 7344 	mov.w	r3, #784	; 0x310
 80008a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0310 	add.w	r3, r7, #16
 80008b2:	4619      	mov	r1, r3
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_GPIO_Init+0xcc>)
 80008b6:	f000 fa4b 	bl	8000d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40011000 	.word	0x40011000
 80008cc:	40010800 	.word	0x40010800

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <Error_Handler+0x8>
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <HAL_SPI_MspInit+0x88>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d12f      	bne.n	80009c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000960:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 8000966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_SPI_MspInit+0x8c>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000990:	23a0      	movs	r3, #160	; 0xa0
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <HAL_SPI_MspInit+0x90>)
 80009a4:	f000 f9d4 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009a8:	2340      	movs	r3, #64	; 0x40
 80009aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <HAL_SPI_MspInit+0x90>)
 80009bc:	f000 f9c8 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3720      	adds	r7, #32
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013000 	.word	0x40013000
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40010800 	.word	0x40010800

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f875 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
	...

08000a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a30:	f7ff fff7 	bl	8000a22 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480b      	ldr	r0, [pc, #44]	; (8000a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a36:	490c      	ldr	r1, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a38:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a4c:	4c09      	ldr	r4, [pc, #36]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5a:	f001 fcab 	bl	80023b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5e:	f7ff fe1b 	bl	8000698 <main>
  bx lr
 8000a62:	4770      	bx	lr
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a6c:	08002440 	.word	0x08002440
  ldr r2, =_sbss
 8000a70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a74:	20000098 	.word	0x20000098

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_Init+0x28>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_Init+0x28>)
 8000a86:	f043 0310 	orr.w	r3, r3, #16
 8000a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8c:	2003      	movs	r0, #3
 8000a8e:	f000 f92b 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a92:	200f      	movs	r0, #15
 8000a94:	f000 f808 	bl	8000aa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a98:	f7ff ff20 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x54>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_InitTick+0x58>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f935 	bl	8000d36 <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e00e      	b.n	8000af4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d80a      	bhi.n	8000af2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae4:	f000 f90b 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae8:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <HAL_InitTick+0x5c>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000004 	.word	0x20000004

08000b08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x1c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x20>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a03      	ldr	r2, [pc, #12]	; (8000b28 <HAL_IncTick+0x20>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000094 	.word	0x20000094

08000b2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_GetTick+0x10>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000094 	.word	0x20000094

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff fff0 	bl	8000b2c <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_Delay+0x44>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffe0 	bl	8000b2c <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000008 	.word	0x20000008

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc8:	f7ff ff90 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff49 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff90 	bl	8000c40 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e169      	b.n	8001038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d64:	2201      	movs	r2, #1
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8158 	bne.w	8001032 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4a9a      	ldr	r2, [pc, #616]	; (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d05e      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d8c:	4a98      	ldr	r2, [pc, #608]	; (8000ff0 <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d875      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d92:	4a98      	ldr	r2, [pc, #608]	; (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d058      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d98:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <HAL_GPIO_Init+0x2a4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d86f      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d9e:	4a96      	ldr	r2, [pc, #600]	; (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d052      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000da4:	4a94      	ldr	r2, [pc, #592]	; (8000ff8 <HAL_GPIO_Init+0x2a8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d869      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000daa:	4a94      	ldr	r2, [pc, #592]	; (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d04c      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000db0:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <HAL_GPIO_Init+0x2ac>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d863      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000db6:	4a92      	ldr	r2, [pc, #584]	; (8001000 <HAL_GPIO_Init+0x2b0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d046      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a90      	ldr	r2, [pc, #576]	; (8001000 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d85d      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d82a      	bhi.n	8000e1c <HAL_GPIO_Init+0xcc>
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d859      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <HAL_GPIO_Init+0x80>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000e4b 	.word	0x08000e4b
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e37 	.word	0x08000e37
 8000ddc:	08000e79 	.word	0x08000e79
 8000de0:	08000e7f 	.word	0x08000e7f
 8000de4:	08000e7f 	.word	0x08000e7f
 8000de8:	08000e7f 	.word	0x08000e7f
 8000dec:	08000e7f 	.word	0x08000e7f
 8000df0:	08000e7f 	.word	0x08000e7f
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e7f 	.word	0x08000e7f
 8000dfc:	08000e7f 	.word	0x08000e7f
 8000e00:	08000e7f 	.word	0x08000e7f
 8000e04:	08000e7f 	.word	0x08000e7f
 8000e08:	08000e7f 	.word	0x08000e7f
 8000e0c:	08000e7f 	.word	0x08000e7f
 8000e10:	08000e7f 	.word	0x08000e7f
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	4a79      	ldr	r2, [pc, #484]	; (8001004 <HAL_GPIO_Init+0x2b4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e22:	e02c      	b.n	8000e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e029      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e024      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e01f      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e01a      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e013      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e009      	b.n	8000e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          break;
 8000e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d801      	bhi.n	8000e8a <HAL_GPIO_Init+0x13a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_Init+0x13e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d802      	bhi.n	8000e9c <HAL_GPIO_Init+0x14c>
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x152>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 80b1 	beq.w	8001032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	4b4d      	ldr	r3, [pc, #308]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a4c      	ldr	r2, [pc, #304]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <HAL_GPIO_Init+0x2b8>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2bc>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a40      	ldr	r2, [pc, #256]	; (8001010 <HAL_GPIO_Init+0x2c0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d013      	beq.n	8000f3c <HAL_GPIO_Init+0x1ec>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <HAL_GPIO_Init+0x2c4>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d00d      	beq.n	8000f38 <HAL_GPIO_Init+0x1e8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a3e      	ldr	r2, [pc, #248]	; (8001018 <HAL_GPIO_Init+0x2c8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d007      	beq.n	8000f34 <HAL_GPIO_Init+0x1e4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a3d      	ldr	r2, [pc, #244]	; (800101c <HAL_GPIO_Init+0x2cc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d101      	bne.n	8000f30 <HAL_GPIO_Init+0x1e0>
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e006      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e004      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f34:	2302      	movs	r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <HAL_GPIO_Init+0x1ee>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	4093      	lsls	r3, r2
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4e:	492f      	ldr	r1, [pc, #188]	; (800100c <HAL_GPIO_Init+0x2bc>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f68:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	492c      	ldr	r1, [pc, #176]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4928      	ldr	r1, [pc, #160]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f80:	4013      	ands	r3, r2
 8000f82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d006      	beq.n	8000f9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4922      	ldr	r1, [pc, #136]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	60cb      	str	r3, [r1, #12]
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	491e      	ldr	r1, [pc, #120]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d006      	beq.n	8000fc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	4918      	ldr	r1, [pc, #96]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	604b      	str	r3, [r1, #4]
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	4914      	ldr	r1, [pc, #80]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d021      	beq.n	8001024 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e021      	b.n	8001032 <HAL_GPIO_Init+0x2e2>
 8000fee:	bf00      	nop
 8000ff0:	10320000 	.word	0x10320000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10220000 	.word	0x10220000
 8000ffc:	10210000 	.word	0x10210000
 8001000:	10120000 	.word	0x10120000
 8001004:	10110000 	.word	0x10110000
 8001008:	40021000 	.word	0x40021000
 800100c:	40010000 	.word	0x40010000
 8001010:	40010800 	.word	0x40010800
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40011000 	.word	0x40011000
 800101c:	40011400 	.word	0x40011400
 8001020:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_GPIO_Init+0x304>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <HAL_GPIO_Init+0x304>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3301      	adds	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103e:	fa22 f303 	lsr.w	r3, r2, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f47f ae8e 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	372c      	adds	r7, #44	; 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	611a      	str	r2, [r3, #16]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4013      	ands	r3, r2
 80010a0:	041a      	lsls	r2, r3, #16
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43d9      	mvns	r1, r3
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	400b      	ands	r3, r1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	611a      	str	r2, [r3, #16]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
	...

080010bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e272      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8087 	beq.w	80011ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010dc:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d00c      	beq.n	8001102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e8:	4b8f      	ldr	r3, [pc, #572]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d112      	bne.n	800111a <HAL_RCC_OscConfig+0x5e>
 80010f4:	4b8c      	ldr	r3, [pc, #560]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d10b      	bne.n	800111a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001102:	4b89      	ldr	r3, [pc, #548]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d06c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x12c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d168      	bne.n	80011e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e24c      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x76>
 8001124:	4b80      	ldr	r3, [pc, #512]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a7f      	ldr	r2, [pc, #508]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e02e      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x98>
 800113a:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7a      	ldr	r2, [pc, #488]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a77      	ldr	r2, [pc, #476]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01d      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0xbc>
 800115e:	4b72      	ldr	r3, [pc, #456]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a71      	ldr	r2, [pc, #452]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6e      	ldr	r2, [pc, #440]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001178:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6a      	ldr	r2, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a67      	ldr	r2, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fcc8 	bl	8000b2c <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fcc4 	bl	8000b2c <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e200      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe4>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fcb4 	bl	8000b2c <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fcb0 	bl	8000b2c <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1ec      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x10c>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d063      	beq.n	80012be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f6:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001202:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d11c      	bne.n	8001248 <HAL_RCC_OscConfig+0x18c>
 800120e:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d116      	bne.n	8001248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x176>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d001      	beq.n	8001232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e1c0      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4939      	ldr	r1, [pc, #228]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e03a      	b.n	80012be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fc69 	bl	8000b2c <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc65 	bl	8000b2c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e1a1      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4927      	ldr	r1, [pc, #156]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc48 	bl	8000b2c <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc44 	bl	8000b2c <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e180      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d03a      	beq.n	8001340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d019      	beq.n	8001306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fc28 	bl	8000b2c <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fc24 	bl	8000b2c <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e160      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012fe:	2001      	movs	r0, #1
 8001300:	f000 fa9c 	bl	800183c <RCC_Delay>
 8001304:	e01c      	b.n	8001340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fc0e 	bl	8000b2c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	e00f      	b.n	8001334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fc0a 	bl	8000b2c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d908      	bls.n	8001334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e146      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	42420000 	.word	0x42420000
 8001330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b92      	ldr	r3, [pc, #584]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e9      	bne.n	8001314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a6 	beq.w	800149a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b8b      	ldr	r3, [pc, #556]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10d      	bne.n	800137a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a87      	ldr	r2, [pc, #540]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b85      	ldr	r3, [pc, #532]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b82      	ldr	r3, [pc, #520]	; (8001584 <HAL_RCC_OscConfig+0x4c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <HAL_RCC_OscConfig+0x4c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7e      	ldr	r2, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x4c8>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbcb 	bl	8000b2c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139a:	f7ff fbc7 	bl	8000b2c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e103      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b75      	ldr	r3, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x4c8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x312>
 80013c0:	4b6f      	ldr	r3, [pc, #444]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a6e      	ldr	r2, [pc, #440]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	e02d      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x334>
 80013d6:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a69      	ldr	r2, [pc, #420]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	4b67      	ldr	r3, [pc, #412]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a66      	ldr	r2, [pc, #408]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	e01c      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x356>
 80013f8:	4b61      	ldr	r3, [pc, #388]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a60      	ldr	r2, [pc, #384]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	4b5e      	ldr	r3, [pc, #376]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 8001412:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a5a      	ldr	r2, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d015      	beq.n	800145e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb7b 	bl	8000b2c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb77 	bl	8000b2c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0b1      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	4b4b      	ldr	r3, [pc, #300]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0ee      	beq.n	800143a <HAL_RCC_OscConfig+0x37e>
 800145c:	e014      	b.n	8001488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb65 	bl	8000b2c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fb61 	bl	8000b2c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e09b      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148e:	4b3c      	ldr	r3, [pc, #240]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8087 	beq.w	80015b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 030c 	and.w	r3, r3, #12
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d061      	beq.n	8001574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d146      	bne.n	8001546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b8:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_RCC_OscConfig+0x4cc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff fb35 	bl	8000b2c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff fb31 	bl	8000b2c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e06d      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	4921      	ldr	r1, [pc, #132]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a19      	ldr	r1, [r3, #32]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	430b      	orrs	r3, r1
 8001512:	491b      	ldr	r1, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x4cc>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb05 	bl	8000b2c <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb01 	bl	8000b2c <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e03d      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x46a>
 8001544:	e035      	b.n	80015b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_OscConfig+0x4cc>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff faee 	bl	8000b2c <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff faea 	bl	8000b2c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e026      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x498>
 8001572:	e01e      	b.n	80015b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e019      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
 8001580:	40021000 	.word	0x40021000
 8001584:	40007000 	.word	0x40007000
 8001588:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_OscConfig+0x500>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	429a      	cmp	r2, r3
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e0d0      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d910      	bls.n	8001604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	4b67      	ldr	r3, [pc, #412]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 0207 	bic.w	r2, r3, #7
 80015ea:	4965      	ldr	r1, [pc, #404]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f2:	4b63      	ldr	r3, [pc, #396]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d001      	beq.n	8001604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b8      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800161c:	4b59      	ldr	r3, [pc, #356]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0308 	and.w	r3, r3, #8
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	4a52      	ldr	r2, [pc, #328]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800163a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800163e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001640:	4b50      	ldr	r3, [pc, #320]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	4313      	orrs	r3, r2
 8001650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d040      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d115      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e07f      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167e:	4b41      	ldr	r3, [pc, #260]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e073      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d101      	bne.n	800169e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06b      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f023 0203 	bic.w	r2, r3, #3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4936      	ldr	r1, [pc, #216]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fa3c 	bl	8000b2c <HAL_GetTick>
 80016b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b8:	f7ff fa38 	bl	8000b2c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e053      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ce:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 020c 	and.w	r2, r3, #12
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	429a      	cmp	r2, r3
 80016de:	d1eb      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016e0:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d210      	bcs.n	8001710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0207 	bic.w	r2, r3, #7
 80016f6:	4922      	ldr	r1, [pc, #136]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e032      	b.n	8001776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d008      	beq.n	800172e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4916      	ldr	r1, [pc, #88]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d009      	beq.n	800174e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	490e      	ldr	r1, [pc, #56]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174e:	f000 f821 	bl	8001794 <HAL_RCC_GetSysClockFreq>
 8001752:	4602      	mov	r2, r0
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	490a      	ldr	r1, [pc, #40]	; (8001788 <HAL_RCC_ClockConfig+0x1c8>)
 8001760:	5ccb      	ldrb	r3, [r1, r3]
 8001762:	fa22 f303 	lsr.w	r3, r2, r3
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1cc>)
 8001768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_RCC_ClockConfig+0x1d0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff f99a 	bl	8000aa8 <HAL_InitTick>

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40022000 	.word	0x40022000
 8001784:	40021000 	.word	0x40021000
 8001788:	08002414 	.word	0x08002414
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_GetSysClockFreq+0x94>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 030c 	and.w	r3, r3, #12
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d002      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0x30>
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0x36>
 80017c2:	e027      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_GetSysClockFreq+0x98>)
 80017c6:	613b      	str	r3, [r7, #16]
      break;
 80017c8:	e027      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0c9b      	lsrs	r3, r3, #18
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	4a17      	ldr	r2, [pc, #92]	; (8001830 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d010      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_GetSysClockFreq+0x94>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	0c5b      	lsrs	r3, r3, #17
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ee:	5cd3      	ldrb	r3, [r2, r3]
 80017f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_RCC_GetSysClockFreq+0x98>)
 80017f6:	fb03 f202 	mul.w	r2, r3, r2
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e004      	b.n	800180e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	613b      	str	r3, [r7, #16]
      break;
 8001812:	e002      	b.n	800181a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetSysClockFreq+0x98>)
 8001816:	613b      	str	r3, [r7, #16]
      break;
 8001818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800181a:	693b      	ldr	r3, [r7, #16]
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200
 8001830:	08002424 	.word	0x08002424
 8001834:	08002434 	.word	0x08002434
 8001838:	003d0900 	.word	0x003d0900

0800183c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <RCC_Delay+0x34>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <RCC_Delay+0x38>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	0a5b      	lsrs	r3, r3, #9
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	fb02 f303 	mul.w	r3, r2, r3
 8001856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001858:	bf00      	nop
  }
  while (Delay --);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1e5a      	subs	r2, r3, #1
 800185e:	60fa      	str	r2, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f9      	bne.n	8001858 <RCC_Delay+0x1c>
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000000 	.word	0x20000000
 8001874:	10624dd3 	.word	0x10624dd3

08001878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e076      	b.n	8001978 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b00      	cmp	r3, #0
 8001890:	d108      	bne.n	80018a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800189a:	d009      	beq.n	80018b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
 80018a2:	e005      	b.n	80018b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff f838 	bl	8000940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001934:	ea42 0103 	orr.w	r1, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	0c1a      	lsrs	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f002 0204 	and.w	r2, r2, #4
 8001956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69da      	ldr	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	603b      	str	r3, [r7, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001990:	f7ff f8cc 	bl	8000b2c <HAL_GetTick>
 8001994:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e12a      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d002      	beq.n	80019b6 <HAL_SPI_Transmit+0x36>
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e122      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_SPI_Transmit+0x48>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e11b      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2203      	movs	r2, #3
 80019d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	88fa      	ldrh	r2, [r7, #6]
 80019e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	88fa      	ldrh	r2, [r7, #6]
 80019ee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a16:	d10f      	bne.n	8001a38 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a42:	2b40      	cmp	r3, #64	; 0x40
 8001a44:	d007      	beq.n	8001a56 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a5e:	d152      	bne.n	8001b06 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <HAL_SPI_Transmit+0xee>
 8001a68:	8b7b      	ldrh	r3, [r7, #26]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d145      	bne.n	8001afa <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	1c9a      	adds	r2, r3, #2
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a92:	e032      	b.n	8001afa <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d112      	bne.n	8001ac8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	1c9a      	adds	r2, r3, #2
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ac6:	e018      	b.n	8001afa <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ac8:	f7ff f830 	bl	8000b2c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d803      	bhi.n	8001ae0 <HAL_SPI_Transmit+0x160>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ade:	d102      	bne.n	8001ae6 <HAL_SPI_Transmit+0x166>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d109      	bne.n	8001afa <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e082      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1c7      	bne.n	8001a94 <HAL_SPI_Transmit+0x114>
 8001b04:	e053      	b.n	8001bae <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <HAL_SPI_Transmit+0x194>
 8001b0e:	8b7b      	ldrh	r3, [r7, #26]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d147      	bne.n	8001ba4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	3b01      	subs	r3, #1
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001b3a:	e033      	b.n	8001ba4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d113      	bne.n	8001b72 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	330c      	adds	r3, #12
 8001b54:	7812      	ldrb	r2, [r2, #0]
 8001b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b70:	e018      	b.n	8001ba4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b72:	f7fe ffdb 	bl	8000b2c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d803      	bhi.n	8001b8a <HAL_SPI_Transmit+0x20a>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b88:	d102      	bne.n	8001b90 <HAL_SPI_Transmit+0x210>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e02d      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1c6      	bne.n	8001b3c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 fbc4 	bl	8002340 <SPI_EndRxTxTransaction>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10a      	bne.n	8001be2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
  }
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d001      	beq.n	8001c28 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
 8001c26:	e104      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c30:	d112      	bne.n	8001c58 <HAL_SPI_Receive+0x50>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10e      	bne.n	8001c58 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c42:	88fa      	ldrh	r2, [r7, #6]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f8f3 	bl	8001e3a <HAL_SPI_TransmitReceive>
 8001c54:	4603      	mov	r3, r0
 8001c56:	e0ec      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c58:	f7fe ff68 	bl	8000b2c <HAL_GetTick>
 8001c5c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <HAL_SPI_Receive+0x62>
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0e1      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_SPI_Receive+0x74>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0da      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2204      	movs	r2, #4
 8001c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	88fa      	ldrh	r2, [r7, #6]
 8001c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	88fa      	ldrh	r2, [r7, #6]
 8001ca2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cca:	d10f      	bne.n	8001cec <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	2b40      	cmp	r3, #64	; 0x40
 8001cf8:	d007      	beq.n	8001d0a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d170      	bne.n	8001df4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001d12:	e035      	b.n	8001d80 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d115      	bne.n	8001d4e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f103 020c 	add.w	r2, r3, #12
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	7812      	ldrb	r2, [r2, #0]
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d4c:	e018      	b.n	8001d80 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d4e:	f7fe feed 	bl	8000b2c <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d803      	bhi.n	8001d66 <HAL_SPI_Receive+0x15e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d64:	d102      	bne.n	8001d6c <HAL_SPI_Receive+0x164>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e058      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1c4      	bne.n	8001d14 <HAL_SPI_Receive+0x10c>
 8001d8a:	e038      	b.n	8001dfe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d113      	bne.n	8001dc2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	b292      	uxth	r2, r2
 8001da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	1c9a      	adds	r2, r3, #2
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001dc0:	e018      	b.n	8001df4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dc2:	f7fe feb3 	bl	8000b2c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d803      	bhi.n	8001dda <HAL_SPI_Receive+0x1d2>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd8:	d102      	bne.n	8001de0 <HAL_SPI_Receive+0x1d8>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e01e      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1c6      	bne.n	8001d8c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 fa4a 	bl	800229c <SPI_EndRxTransaction>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b08a      	sub	sp, #40	; 0x28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e4c:	f7fe fe6e 	bl	8000b2c <HAL_GetTick>
 8001e50:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e58:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e64:	7ffb      	ldrb	r3, [r7, #31]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d00c      	beq.n	8001e84 <HAL_SPI_TransmitReceive+0x4a>
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e70:	d106      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <HAL_SPI_TransmitReceive+0x46>
 8001e7a:	7ffb      	ldrb	r3, [r7, #31]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d001      	beq.n	8001e84 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
 8001e82:	e17f      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x5c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_SPI_TransmitReceive+0x5c>
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e174      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_SPI_TransmitReceive+0x6e>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e16d      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d003      	beq.n	8001ec4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	887a      	ldrh	r2, [r7, #2]
 8001eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	887a      	ldrh	r2, [r7, #2]
 8001ee6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f04:	2b40      	cmp	r3, #64	; 0x40
 8001f06:	d007      	beq.n	8001f18 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f20:	d17e      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_SPI_TransmitReceive+0xf6>
 8001f2a:	8afb      	ldrh	r3, [r7, #22]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d16c      	bne.n	800200a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	881a      	ldrh	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	1c9a      	adds	r2, r3, #2
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f54:	e059      	b.n	800200a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d11b      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x162>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_SPI_TransmitReceive+0x162>
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d113      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	881a      	ldrh	r2, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d119      	bne.n	8001fde <HAL_SPI_TransmitReceive+0x1a4>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d014      	beq.n	8001fde <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc6:	1c9a      	adds	r2, r3, #2
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001fde:	f7fe fda5 	bl	8000b2c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d80d      	bhi.n	800200a <HAL_SPI_TransmitReceive+0x1d0>
 8001fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ff4:	d009      	beq.n	800200a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e0bc      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1a0      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x11c>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d19b      	bne.n	8001f56 <HAL_SPI_TransmitReceive+0x11c>
 800201e:	e082      	b.n	8002126 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_SPI_TransmitReceive+0x1f4>
 8002028:	8afb      	ldrh	r3, [r7, #22]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d171      	bne.n	8002112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	330c      	adds	r3, #12
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800204a:	b29b      	uxth	r3, r3
 800204c:	3b01      	subs	r3, #1
 800204e:	b29a      	uxth	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002054:	e05d      	b.n	8002112 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11c      	bne.n	800209e <HAL_SPI_TransmitReceive+0x264>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d017      	beq.n	800209e <HAL_SPI_TransmitReceive+0x264>
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	2b01      	cmp	r3, #1
 8002072:	d114      	bne.n	800209e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	330c      	adds	r3, #12
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29a      	uxth	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d119      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x2a6>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d014      	beq.n	80020e0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c0:	b2d2      	uxtb	r2, r2
 80020c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020dc:	2301      	movs	r3, #1
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020e0:	f7fe fd24 	bl	8000b2c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d803      	bhi.n	80020f8 <HAL_SPI_TransmitReceive+0x2be>
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f6:	d102      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x2c4>
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e038      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d19c      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x21c>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d197      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002126:	6a3a      	ldr	r2, [r7, #32]
 8002128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f908 	bl	8002340 <SPI_EndRxTxTransaction>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e01d      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10a      	bne.n	8002166 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002182:	2300      	movs	r3, #0
  }
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	603b      	str	r3, [r7, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800219c:	f7fe fcc6 	bl	8000b2c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021ac:	f7fe fcbe 	bl	8000b2c <HAL_GetTick>
 80021b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021c2:	e054      	b.n	800226e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ca:	d050      	beq.n	800226e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021cc:	f7fe fcae 	bl	8000b2c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d902      	bls.n	80021e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13d      	bne.n	800225e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021fa:	d111      	bne.n	8002220 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002204:	d004      	beq.n	8002210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800220e:	d107      	bne.n	8002220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800221e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002228:	d10f      	bne.n	800224a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e017      	b.n	800228e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	3b01      	subs	r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	4013      	ands	r3, r2
 8002278:	68ba      	ldr	r2, [r7, #8]
 800227a:	429a      	cmp	r2, r3
 800227c:	bf0c      	ite	eq
 800227e:	2301      	moveq	r3, #1
 8002280:	2300      	movne	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	429a      	cmp	r2, r3
 800228a:	d19b      	bne.n	80021c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3720      	adds	r7, #32
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000

0800229c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022b0:	d111      	bne.n	80022d6 <SPI_EndRxTransaction+0x3a>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ba:	d004      	beq.n	80022c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c4:	d107      	bne.n	80022d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022d4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022de:	d117      	bne.n	8002310 <SPI_EndRxTransaction+0x74>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e8:	d112      	bne.n	8002310 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	2200      	movs	r2, #0
 80022f2:	2101      	movs	r1, #1
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff ff49 	bl	800218c <SPI_WaitFlagStateUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d01a      	beq.n	8002336 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e013      	b.n	8002338 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2200      	movs	r2, #0
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ff36 	bl	800218c <SPI_WaitFlagStateUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e000      	b.n	8002338 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2201      	movs	r2, #1
 8002354:	2102      	movs	r1, #2
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff ff18 	bl	800218c <SPI_WaitFlagStateUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e013      	b.n	800239a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2200      	movs	r2, #0
 800237a:	2180      	movs	r1, #128	; 0x80
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f7ff ff05 	bl	800218c <SPI_WaitFlagStateUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e000      	b.n	800239a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <memset>:
 80023a2:	4603      	mov	r3, r0
 80023a4:	4402      	add	r2, r0
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d100      	bne.n	80023ac <memset+0xa>
 80023aa:	4770      	bx	lr
 80023ac:	f803 1b01 	strb.w	r1, [r3], #1
 80023b0:	e7f9      	b.n	80023a6 <memset+0x4>
	...

080023b4 <__libc_init_array>:
 80023b4:	b570      	push	{r4, r5, r6, lr}
 80023b6:	2600      	movs	r6, #0
 80023b8:	4d0c      	ldr	r5, [pc, #48]	; (80023ec <__libc_init_array+0x38>)
 80023ba:	4c0d      	ldr	r4, [pc, #52]	; (80023f0 <__libc_init_array+0x3c>)
 80023bc:	1b64      	subs	r4, r4, r5
 80023be:	10a4      	asrs	r4, r4, #2
 80023c0:	42a6      	cmp	r6, r4
 80023c2:	d109      	bne.n	80023d8 <__libc_init_array+0x24>
 80023c4:	f000 f81a 	bl	80023fc <_init>
 80023c8:	2600      	movs	r6, #0
 80023ca:	4d0a      	ldr	r5, [pc, #40]	; (80023f4 <__libc_init_array+0x40>)
 80023cc:	4c0a      	ldr	r4, [pc, #40]	; (80023f8 <__libc_init_array+0x44>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	42a6      	cmp	r6, r4
 80023d4:	d105      	bne.n	80023e2 <__libc_init_array+0x2e>
 80023d6:	bd70      	pop	{r4, r5, r6, pc}
 80023d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80023dc:	4798      	blx	r3
 80023de:	3601      	adds	r6, #1
 80023e0:	e7ee      	b.n	80023c0 <__libc_init_array+0xc>
 80023e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e6:	4798      	blx	r3
 80023e8:	3601      	adds	r6, #1
 80023ea:	e7f2      	b.n	80023d2 <__libc_init_array+0x1e>
 80023ec:	08002438 	.word	0x08002438
 80023f0:	08002438 	.word	0x08002438
 80023f4:	08002438 	.word	0x08002438
 80023f8:	0800243c 	.word	0x0800243c

080023fc <_init>:
 80023fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fe:	bf00      	nop
 8002400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002402:	bc08      	pop	{r3}
 8002404:	469e      	mov	lr, r3
 8002406:	4770      	bx	lr

08002408 <_fini>:
 8002408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240a:	bf00      	nop
 800240c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240e:	bc08      	pop	{r3}
 8002410:	469e      	mov	lr, r3
 8002412:	4770      	bx	lr
